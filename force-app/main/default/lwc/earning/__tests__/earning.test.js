import { createElement } from 'lwc';
import Earning from 'c/earning';


const mockGetRecords = require('./data/testData.json');

describe('c-earning', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic',async () => {
    
        const element = createElement('c-earning', {
            is: Earning
        });
     
        element.value = "8986";
        document.body.appendChild(element);
        
        const handler = jest.fn();
      
        const div = element.shadowRoot.querySelectorAll("lightning-button-icon[data-id=amount_input_field]");
        element.addEventListener("click", handler);

        element.dispatchEvent(
            new CustomEvent('click',{detail:mockGetRecords})
        );
    
            expect(div).not.toBeNull();
            expect(handler).toHaveBeenCalled();
            expect(handler).toHaveBeenCalledTimes(1);
        
     });

     test('API Test suite', ()=>{
        const element = createElement('c-earning', {
            is: Earning
        });

        element.value = "8986";
        document.body.appendChild(element);
        
        const handler = jest.fn();
      
        const div = element.shadowRoot.querySelectorAll("lightning-input");
        element.addEventListener("change", handler);

        element.dispatchEvent(
            new CustomEvent('change',{detail:mockGetRecords})
        );
    
            expect(div).not.toBeNull();
            expect(handler).toHaveBeenCalled();
            expect(handler).toHaveBeenCalledTimes(1);
        });

     test('API Test suite2', ()=>{
        const element = createElement('c-earning', {
            is: Earning
        });
     
        element.value = "8986";
        document.body.appendChild(element);
        
        const handler = jest.fn();
      
        const div = element.shadowRoot.querySelectorAll("lightning-combobox");
        element.addEventListener("change", handler);

        element.dispatchEvent(
            new CustomEvent('change',{detail:mockGetRecords})
        );
    
            expect(div).not.toBeNull();
            expect(handler).toHaveBeenCalled();
            expect(handler).toHaveBeenCalledTimes(1);
        });
    })